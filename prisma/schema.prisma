// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  emailVerified        DateTime?
  image                String?
  hashedPassword       String?
  relationshipStatus   RelationshipStatus @default(SINGLE)
  currentStreak        Int       @default(0)
  longestStreak        Int       @default(0)
  totalResets          Int       @default(0)
  streakStart          DateTime?
  level                Int       @default(1)
  totalXP              Int       @default(0)
  onboardingCompleted  Boolean   @default(false)
  onboardingData       String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  dailyLogs     DailyLog[]
  healthMetrics HealthMetric[]
  achievements  UserAchievement[]
  challenges    UserChallenge[]
  forumPosts    ForumPost[]
  postVotes     PostVote[]
  comments      Comment[]
  userXP        UserXP[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DailyLog {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime
  moodRating       Int?
  energyLevel      Int?
  confidenceLevel  Int?
  urgeIntensity    Int?
  notes            String?  @db.Text
  activitiesCompleted String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_logs")
}

model HealthMetric {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime
  sleepHours      Float?
  exerciseMinutes Int?
  waterIntake     Float?
  weight          Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("health_metrics")
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  badgeImage  String
  category    AchievementCategory
  tier        AchievementTier
  requirement Int
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())

  users UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Challenge {
  id          String           @id @default(cuid())
  title       String
  description String           @db.Text
  category    ChallengeCategory
  tier        ChallengeTier
  points      Int
  duration    Int
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())

  users UserChallenge[]

  @@map("challenges")
}

model UserChallenge {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  progress    Int      @default(0)
  isCompleted Boolean  @default(false)
  startedAt   DateTime @default(now())
  completedAt DateTime?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id])

  @@unique([userId, challengeId])
  @@map("user_challenges")
}

model ForumPost {
  id                String        @id @default(cuid())
  userId            String
  title             String
  content           String        @db.Text
  category          ForumCategory
  isAnonymous       Boolean       @default(true)
  anonymousUsername String?
  upvotes           Int           @default(0)
  downvotes         Int           @default(0)
  isPinned          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  votes    PostVote[]

  @@map("forum_posts")
}

model PostVote {
  id     String   @id @default(cuid())
  userId String
  postId String
  type   VoteType

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_votes")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String   @db.Text
  isAnonymous Boolean @default(true)
  anonymousUsername String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model UserXP {
  id           String   @id @default(cuid())
  userId       String
  activityType String
  pointsEarned Int
  date         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_xp")
}

// Enums
enum RelationshipStatus {
  SINGLE
  COMMITTED  
  BROKEN_UP
  MARRIED
}

enum AchievementCategory {
  STREAK
  HEALTH
  SOCIAL
  MILESTONE
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  DIAMOND
  LEGENDARY
}

enum ChallengeCategory {
  FITNESS
  SOCIAL
  MINDFULNESS
  PRODUCTIVITY
  RECOVERY
}

enum ChallengeTier {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTER
}

enum ForumCategory {
  GENERAL
  SUCCESS_STORIES
  STRUGGLES
  FITNESS
  RELATIONSHIPS
  MENTAL_HEALTH
}

enum VoteType {
  UP
  DOWN
}
